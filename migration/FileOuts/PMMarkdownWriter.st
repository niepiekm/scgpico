'From Squeak3.9.1 of 2 March 2008 [latest update: #7075] on 12 July 2022 at 12:36:20 pm'!PRDocumentWriter subclass: #PMMarkdownWriter	instanceVariableNames: 'currentPage tableRow'	classVariableNames: ''	poolDictionaries: ''	category: 'PierMigration'!!PMMarkdownWriter commentStamp: 'lr 3/14/2022 15:23' prior: 0!I am a clone of the PRWikiWriter, adapted to produce markdown instead of wiki syntax.!!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 7/11/2022 16:23'!absoluteLinkFor: aLink		"Return the absolute link for this object, if necessary.	External links are immediately returned."		| link target |		link := aLink reference.	link isEmpty ifTrue: [ ^ link ].	aLink isInternal ifFalse: [ 		(link startsWith: '/download')			ifTrue: [ link := '%assets_url%', link ].		^ link ].		target := aLink target.	target notNil		ifTrue: [ 			target isFile				ifTrue: [					link := '%assets_url%/files/', (self filePathFor: target) ]				ifFalse: [					| path |					path := target absolutePath.					link := '%base_url%', path ]				].			^ link! !!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 7/6/2022 12:06'!filePathFor: aPRFile	"This returns the actual file path for an uploaded asset."		^ ('/' join: aPRFile file location), '/', aPRFile file filename! !!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 7/11/2022 16:23'!isScgbibQuery: aLink	^ aLink isInternal and:		[ aLink target notNil			and: [ aLink target isComponent				and: [ aLink target componentClass = CPQueryBox ] ] ]! !!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 3/14/2022 15:22'!lineMatcher	^ PRDocumentParser lineMatcher! !!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 3/14/2022 15:04'!newLine	"lf instead of cr"	stream nextPut: Character lf.	newline := true! !!PMMarkdownWriter methodsFor: 'private' stamp: 'lr 5/20/2022 11:18'!relativeLinkFor: anObject		"Return the relative link for this object, if necessary.	External links are immediately returned."		| link levels prefix |		link := anObject reference.	link isEmpty ifTrue: [ ^ link ].	anObject isInternal ifFalse: [ ^ link ].		link first = $/ ifFalse: [ ^ '?' , link ].		levels := anObject owner absolutePath count: [: each | each = $/].	self assert: levels > 0 description: 'Missing at least one slash'.	prefix := '.'.	levels - 1 timesRepeat: [ prefix := '../', prefix ].		link := prefix, link.	^ '?', link! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 17:24'!visitAnchor: anObject	"self nextPutAll: anObject class markup; nextPutAll: anObject name; newLine"! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 17:25'!visitAnnotatedParagraph: anObject	self halt: 'Encountered an unexpected annotated paragraph'! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/4/2022 16:08'!visitBoldFormat: anObject	self nextPutAll: '**'.	self visitFormat: anObject.	self nextPutAll: '**'! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 17:32'!visitDefinitionList: anObject	"TODO"	newline ifFalse: [ self newLine ].	anObject children do: [ :each |		self 			nest: each class markup			do: [ self visit: each ] ]! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 15:26'!visitHeader: anObject	anObject level timesRepeat: [ self nextPutAll: '#' ].	super visitHeader: anObject.	self newLine! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/5/2022 16:07'!visitHorizontalRule: anObject	self newLine; nextPutAll: '---'; newLine! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/4/2022 15:58'!visitItalicFormat: anObject	self nextPutAll: '*'.	self visitFormat: anObject.	self nextPutAll: '*'! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/11/2022 16:21'!visitLink: aLink	"TODO: 	- handle the scgbib parameters.	- handle PRValueLink (eg list of children in wiki page)	- handle embedded pages (as opposed to embedded images)	"	| text |		(self isScgbibQuery: aLink)		ifTrue: [			self nextPutAll: self scgbibForm.			^ self ].		aLink isEmbedded ifTrue: [ self nextPutAll: '!!' ].	self 		nextPutAll: '['.	aLink hasChildren		ifTrue: [ self visitDocumentGroup: aLink ]		ifFalse: [			text := aLink isInternal				ifTrue: [ 					| target |					target := aLink target.					target notNil						ifTrue: [ target title ]						ifFalse: [ aLink text ]					]				ifFalse: [ aLink text ].			self nextPutAll: text ].			self		nextPutAll: '](';		nextPutAll: (self absoluteLinkFor: aLink);		nextPutAll: ')'.! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/6/2022 10:27'!visitList: anObject	self newLine.	self nest: Character tab asString do: [ super visitList: anObject ]!]style[(19 28 22 34)f2b,f2,f1,f2! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/6/2022 10:30'!visitListItem: anObject	"NB: hack to ignore the first tab to avoid indenting the whole list"	nesting allButFirst do: [ :each | self nextPutAll: each ].	self nextPutAll: '- '.	super visitListItem: anObject.	self newLine! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/5/2022 14:38'!visitPage: anObject	self nextPutAll: '---'.	self newLine.	self nextPutAll: 'Title: '.	self nextPutAll: anObject title.	self newLine.	self nextPutAll: '---'.	self newLine.	self newLine.	anObject document  ifNotNil: [		self visitDocument: anObject document ]! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 17:37'!visitPreformatted: anObject	self nextPutAll: '```'.	anObject children do: [ :each |		self			nextPutAll: each text;			newLine ].	self nextPutAll: '```'.	self newLine.! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/4/2022 14:24'!visitTable: anObject	tableRow := 0.	self newLine.	super visitTable: anObject! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/4/2022 16:07'!visitTableCell: anObject	self nextPutAll: anObject class markup.	anObject isAligned ifTrue: [		anObject isAlignedLeft ifTrue: [ self nextPutAll: anObject class markupLeft ].		anObject isAlignedCenter ifTrue: [ self nextPutAll: anObject class markupCenter ].		anObject isAlignedRight ifTrue: [ self nextPutAll: anObject class markupRight ] ].	anObject isHeading ifTrue: [ self nextPutAll: anObject class markupHeading ].	super visitTableCell: anObject! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 7/4/2022 16:51'!visitTableRow: anObject	tableRow := tableRow + 1.	super visitTableRow: anObject.	self newLine.	tableRow = 1 ifTrue: [		anObject columnCount timesRepeat:			[ self nextPutAll: '|---' ].		self newLine.	]! !!PMMarkdownWriter methodsFor: 'visiting' stamp: 'lr 3/14/2022 17:41'!visitText: anObject	"Write out ==anObject=='s text to the receivers output-stream and escape special characters within and at the beginning of a line."	| string key |	string := anObject text.	newline ifTrue: [		key := self lineMatcher keys			detect: [ :each | string beginsWith: each ]			ifNone: [ nil ].		key isNil ifFalse: [			self nextPut: $\; nextPutAll: key.			string := string allButFirst: key size ] ].	self nextPutAll: (PRDocumentParser escape: string)! !!PMMarkdownWriter methodsFor: 'constants' stamp: 'lr 7/11/2022 18:30'!handledComponentTypes	"	PMMarkdownWriter new handledComponentTypes	"	^ { CPQueryBox }! !!PMMarkdownWriter methodsFor: 'constants' stamp: 'lr 7/11/2022 16:33'!scgbibForm	^ '<form method="GET" action="%assets_url%/scgbib"><input type="text" name="query" size="15" maxlength="800"/><input type="submit" value="scg bib"/></form>'! !